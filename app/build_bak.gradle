apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'android-apt'

def releaseTime() {
    return new Date().format("yyyy-MM-dd_HH:mm")//不需要加 timeZone UTC，否则时间不正确（没有加时区8小时）
}

def copyFile(List srcFiles,List destFiles) {
    for (i in 0..srcFiles.size() - 1){
        copy {
            from(srcFiles[i])
            into(destFiles[i])
        }
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.xiaoxiao.testrxjava"
        minSdkVersion 15
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debug {
            // No debug config
            storeFile file("../app.keystore")
            storePassword "virgox"
            keyAlias "xiaoxiao"
            keyPassword "virgox"
        }
        release {
            storeFile file("../app.keystore")
            storePassword "virgox"
            keyAlias "xiaoxiao"
            keyPassword "virgox"
        }
    }

    buildTypes {
        debug {
            resValue "string","app_name","测试debug"
        }
        release {
            minifyEnabled false
            resValue "string","app_name","测试release"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    repositories {
//        flatDir {
//            dirs 'libs'
//        }
//    }
//    sourceSets {
//        main {
//            jni.srcDirs = ["libs"]
//        }
//    }

    flavorDimensions "market","channel"
    productFlavors {
        marketA {
            dimension "market"
        }

        marketB {
            dimension "market"
        }

        channelA {
            dimension "channel"
        }

        channelB {
            dimension "channel"
        }
    }

    def srcFiles = []
    def destFiles = []
    applicationVariants.all { variant ->

        variant.outputs.all { output ->
//            def newPath = variant.getPackageApplication().outputDirectory.getAbsolutePath().replace("${variant.productFlavors[0].name}/","")
//            variant.getPackageApplication().outputDirectory = new File(newPath)
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "app-${variant.versionName}_-${variant.productFlavors[0].name}_${releaseTime()}_release.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "app-${defaultConfig.versionName}-${variant.productFlavors[0].name}_debug.apk"
                } else {
                    fileName = "app-${defaultConfig.versionName}_-${variant.productFlavors[0].name}_${releaseTime()}_preview.apk"
                }
//                outputFileName = fileName
//                def outputPath = outputFile.parentFile.absolutePath + File.separator + fileName
                def newPath = outputFile.parentFile.absolutePath.replace("${variant.productFlavors[0].name}/","")
                println("ddddddd1${outputFile.parentFile.absolutePath}")
                println("ddddddd2${newPath}")
                srcFiles.add(outputFile.parentFile.absolutePath + File.separator + fileName)
                destFiles.add(newPath)
//                output.outputFile.name.replace(outputFile.name, fileName);
//                output.outputFile = new File(outputFile.parent + "/${variant.buildType.name}", fileName)
            }
        }
    }
//
//    build.doLast {
//        copyFile(srcFiles,destFiles)
//    }

//    afterEvaluate {
//        assembleDebug.doLast {
//            copyFile(srcFiles,destFiles)
//        }
//
//        assembleRelease.doLast {
//            copyFile(srcFiles,destFiles)
//        }
//
//        assemblePreview.doLast {
//            copyFile(srcFiles,destFiles)
//        }
//    }

    task renameApk << {copyFile(srcFiles,destFiles)}

    tasks.whenTaskAdded{ task ->
        println("task's name:${task.name}")
        if (task.name == 'assembleDebug'){
            task.finalizedBy renameApk
        }else if (task.name == 'assembleRelease'){
            task.finalizedBy renameApk
        }else if (task.name == 'assemblePreview'){
            task.finalizedBy renameApk
        }
    }
}

dependencies {
    //    compile fileTree(dir: 'libs', include: ['*.jar'])
    //    compile(name:'madlib', ext:'aar')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    //    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.2'
    compile project(':pure2D')
    compile 'com.jakewharton:butterknife:8.4.0'
    //    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    //    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    //    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    apt 'com.google.dagger:dagger-compiler:2.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'com.google.dagger:dagger:2.2'
    //    compile 'com.longzhu.sdk:pure2D:1.0.9'
    compile 'com.facebook.fresco:fresco:1.11.0'
    compile 'com.facebook.fresco:animated-gif:1.11.0'
    compile 'com.android.support:cardview-v7:23.2.0'
}
