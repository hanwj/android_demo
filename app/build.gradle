apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.butterknife'
//apply plugin: 'android-apt'

def releaseTime() {
    return new Date().format("yyyy-MM-dd_HH:mm")//不需要加 timeZone UTC，否则时间不正确（没有加时区8小时）
}

def copyFile(List srcFiles, List destFiles) {
    for (i in 0..srcFiles.size() - 1) {
        copy {
            from(srcFiles[i])
            into(destFiles[i])
        }
    }
}

def isWindows() {
    return System.properties['os.name'].contains('windows');
}

def createDir(String dir) {
    String path = System.getProperty("TEST_PATH");
    println(path);
    File file = new File(dir);
    if(!file.exists()){
        file.mkdirs();
    }
}

def clearDir(String path) {
    File dir = new File(path);
    if (dir.exists() && dir.isDirectory()){
        File[] fileList = dir.listFiles();
        for (File file : fileList){
            if (file.isDirectory()){
                file.deleteDir();
            }else {
                file.delete();
            }
        }
    }
}

def keyStorePath = System.getenv("KEYSTORE_PATH")
def keyStoreConfig = new Properties()
println "read properties${keyStorePath}"
if (keyStorePath != null && !keyStorePath.equals("")){
    keyStoreConfig.load(new FileInputStream(keyStorePath))
    println keyStoreConfig
}else {
    keyStoreConfig.put("storeFile","../app.keystore")
    keyStoreConfig.put("storePassword","virgox")
    keyStoreConfig.put("keyAlias","xiaoxiao")
    keyStoreConfig.put("keyPassword","virgox")
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.xiaoxiao.testrxjava"
//        applicationId "com.meituan.qcs.meishi"
        minSdkVersion 15
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        release {
            storeFile file(keyStoreConfig['storeFile'])
            storePassword keyStoreConfig['storePassword']
            keyAlias keyStoreConfig['keyAlias']
            keyPassword keyStoreConfig['keyPassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "测试debug"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            resValue "string", "app_name", "测试release"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    repositories {
//        flatDir {
//            dirs 'libs'
//        }
//    }
//    sourceSets {
//        main {
//            jni.srcDirs = ["libs"]
//        }
//    }

//    flavorDimensions "market"
//    flavorDimensions "market", "channel"
    productFlavors {
//        marketA {
//            dimension "market"
//        }

//        marketa {
//            dimension "market"
//        }

//        marketB {
//            dimension "market"
//        }

//        channelA {
//            dimension "channel"
//        }
//
//        channelB {
//            dimension "channel"
//        }
    }
//    dynamicFeatures = [":featurea"]
    viewBinding {
        enabled = true
    }

}

def Properties buildConfig = new Properties();
if (project.hasProperty("jdkPath")) {
    buildConfig.put("jdkPath", project.property("jdkPath"));
}
if (project.hasProperty("scanDir")) {
    buildConfig.put("scanDir", project.property("scanDir"));
}

/**
 * 360Fireline代码扫描
 * gradlew runFireline -PjdkPath=$JAVA_HOME -PscanDir=$scanDir
 */
task runFireline(type:Exec) {
    def javaHome = "java"
    def outDir = "${rootDir}/scanReport"
    def scanDir = "${rootDir}"
    println buildConfig.jdkPath
    if (buildConfig.jdkPath != null && !buildConfig.jdkPath.equals("")){
        println "111"
        javaHome = buildConfig.jdkPath
    }
    if (buildConfig.jdkPath != null && !buildConfig.scanDir.equals('')){
        scanDir = scanDir + File.separator + buildConfig.scanDir
    }

    println "rootDir:${rootDir}"
    println "scanDir:${scanDir}"
    createDir(outDir)
    clearDir(outDir)
    if (isWindows()){
        println "windows"
        commandLine 'cmd' , '/c' , "${javaHome} -jar ${rootDir}/fireline_1.6.11.jar -s=${scanDir} proj_name=androidphone -r=${outDir}"
    }else {
        println "not windows"
        commandLine 'bash' , '-c' , "${javaHome} -jar ${rootDir}/fireline_1.6.11.jar -s=${scanDir} proj_name=androidphone -r=${outDir}"
    }
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
    println standardOutput
}

task compressResByPngquant(type: Exec){
    def resDir = "src/main/res/"
    def pngCmd = ''
    def jpgCmd = ''
    fileTree(resDir){
        include('**/*.png',"**/*.jpg")
    }.each{
        file ->
            def name = file.name
            def pos = name.lastIndexOf(".")
            def suffix = name.substring(pos)
            if (suffix.equals('.png')){
                pngCmd += " ${file.absolutePath}"
            }else if (suffix.equals('.jpg')){
                jpgCmd += " ${file.absolutePath}"
            }
            println file.absolutePath
//            cmd += "${rootDir}/pngquant --posterize RGBA4444 --ext ${suffix} --force ${file.absolutePath}"
    }
    def cmd = "${rootDir}/pngquant --posterize RGBA4444 --ext .png --force ${pngCmd} && " +
            "${rootDir}/pngquant --posterize RGBA4444 --ext '' --force ${jpgCmd}"
    commandLine 'bash',"-c", cmd
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('transformNativeLibsWithMergeJniLibsFor')) {
        // transformNativeLibsWithMergeJniLibsForPrdRelease
        task.doLast({
            println '------merge jni lib start------'
            def pathStr = task.name.replace('transformNativeLibsWithMergeJniLibsFor', '');
            def flavor = 'prd'
            def env = 'Release'
            if (pathStr.endsWith('Debug')) {
                env = 'Debug'
            } else if (pathStr.endsWith('Release')) {
                env = 'Release'
            } else {
                println "------merge jni lib fail: no matched buid type------"
                return;
            }
            flavor = pathStr.replace(env, '')
            if (!flavor.equals('')){
                flavor = flavor.substring(0,1).toLowerCase() + flavor.substring(1)
            }
            env = env.toLowerCase()
//            mergeJniLib(flavor, env);
            println "------merge jni lib success------"
        })
    }
}

dependencies {
    //    compile fileTree(dir: 'libs', include: ['*.jar'])
    //    compile(name:'madlib', ext:'aar')
    testImplementation 'junit:junit:4.12'

    implementation project(path: ':pure2D',configuration: 'default')
    implementation project(path: ':pluginhost')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    //    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.2'
    implementation 'com.jakewharton:butterknife:8.4.0'
    //    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    //    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    //    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.2'
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'com.google.dagger:dagger:2.2'
    implementation 'com.facebook.fresco:fresco:1.11.0'
    implementation 'com.facebook.fresco:animated-gif:1.11.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    //    compile 'org.slf4j:slf4j-jdk14:1.7.14'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
//    implementation "androidx.activity:activity:1.1.0"

    api 'com.parse.bolts:bolts-tasks:1.4.0'
    api 'com.parse.bolts:bolts-applinks:1.4.0'

    implementation 'com.google.code.gson:gson:2.8.2'
}
